# Generated by Django 5.2 on 2025-09-12 06:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import shortuuid.django_fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='HomePageImageBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_drive_link', models.CharField(max_length=1000)),
                ('google_drive_id', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='HomePageTextBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('mobile_number', models.CharField(max_length=15)),
                ('emergency_number', models.CharField(max_length=15)),
                ('dob', models.DateField()),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('pincode', models.CharField(max_length=6)),
                ('district', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('education', models.CharField(choices=[('Matriculation', 'Matriculation'), ('Intermediate', 'Intermediate'), ('Diploma', 'Diploma'), ("Bachelor's Degree", "Bachelor's Degree"), ("Master's Degree", "Master's Degree"), ('PhD', 'PhD'), ('Other', 'Other')], max_length=50)),
                ('is_checked_in', models.BooleanField(default=False)),
                ('is_vendor', models.BooleanField(default=False)),
                ('category', models.CharField(choices=[('GEN', 'General'), ('OBC', 'OBC'), ('SC', 'SC'), ('ST', 'ST'), ('PWD', 'PWD'), ('OTHER', 'Others')], default='GEN', help_text='Select your category', max_length=10)),
                ('ssid', shortuuid.django_fields.ShortUUIDField(alphabet='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghjklmnpqrstuvwxyz', blank=True, length=5, max_length=5, null=True, prefix='', unique=True)),
                ('accepted_terms', models.BooleanField(default=False)),
                ('accepted_privacy_policy', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('view_user_details', 'Can view user details')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('type', models.CharField(choices=[('Profit', 'Profit'), ('Loss', 'Loss')], default='Loss', max_length=10)),
                ('date', models.DateField()),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Cafe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('description', models.TextField()),
                ('venue_location', models.TextField(help_text='Detailed location of the venue')),
                ('venue_name', models.CharField(help_text='Name of the venue', max_length=200)),
                ('business_type', models.CharField(default='Cafe', max_length=50)),
                ('max_banners', models.PositiveIntegerField(default=2, help_text='Maximum number of banners allowed')),
                ('social_media_links', models.TextField(blank=True, help_text='Comma separated list of social media links', null=True)),
                ('capacity', models.PositiveIntegerField(help_text='Maximum capacity of the venue')),
                ('equipment_available', models.TextField(blank=True, help_text='List of available equipment', null=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Approval status of the application')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=15, null=True)),
                ('pincode', models.CharField(help_text='Pincode of the venue location', max_length=10)),
                ('district', models.CharField(help_text='District of the venue location', max_length=100)),
                ('city', models.CharField(help_text='City of the venue location', max_length=100)),
                ('state', models.CharField(help_text='State of the venue location', max_length=100)),
                ('upi_id', models.CharField(max_length=50)),
                ('recipient_name', models.CharField(max_length=100)),
                ('thank_you_message', models.CharField(max_length=200)),
                ('available_seats', models.PositiveIntegerField(default=0)),
                ('opening_time', models.TimeField()),
                ('closing_time', models.TimeField()),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('unapproved', 'Unapproved')], default='unapproved', max_length=20)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_cafes', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ManyToManyField(blank=True, related_name='cafes_staffed', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cafes', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(blank=True, related_name='joined_cafes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Gym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gim_uid', shortuuid.django_fields.ShortUUIDField(alphabet='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghjklmnpqrstuvwxyz', length=20, max_length=20, prefix='', unique=True)),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('pincode', models.CharField(max_length=6)),
                ('state', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('website_url', models.URLField(blank=True, null=True)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.JSONField(blank=True, default=list, help_text='A list of contact phone numbers.')),
                ('equipment_available', models.TextField(blank=True, help_text='List of available equipment', null=True)),
                ('additional_services', models.TextField(blank=True, help_text='Any additional services offered', null=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Approval status of the application')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('upi_id', models.CharField(blank=True, help_text='UPI ID for gym payments', max_length=100, null=True)),
                ('recipient_name', models.CharField(blank=True, help_text='Recipient name for UPI payments', max_length=100, null=True)),
                ('thank_you_message', models.TextField(blank=True, help_text='Thank you message after payment', null=True)),
                ('max_banners', models.PositiveIntegerField(default=2, help_text='Maximum number of banners allowed')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_gyms', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GymBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_drive_link', models.CharField(max_length=1000)),
                ('google_drive_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banners', to='library.gym')),
            ],
        ),
        migrations.CreateModel(
            name='GymCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('discount_type', models.CharField(choices=[('PERCENTAGE', 'Percentage'), ('FIXED', 'Fixed Amount')], max_length=10)),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('max_usage', models.PositiveIntegerField(default=1)),
                ('current_usage', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('EXPIRED', 'Expired')], default='ACTIVE', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='library.gym')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GymExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense_name', models.CharField(blank=True, choices=[('Wifi', 'Wifi'), ('Water', 'Water'), ('Chair', 'Chair'), ('Table', 'Table'), ('Light', 'Light'), ('Books', 'Books'), ('Electricity Bills', 'Electricity Bills'), ('Rent Paid', 'Rent Paid'), ('Stationary Items', 'Stationary Items'), ('Legal Charges', 'Legal Charges'), ('Others', 'Others')], help_text='Expense name for allocation log.', max_length=50, null=True)),
                ('expense_description', models.TextField(blank=True, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateField()),
                ('payment_mode', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('upi', 'UPI')], default='cash', max_length=10)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='library.gym')),
            ],
        ),
        migrations.CreateModel(
            name='GymProfileImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_drive_link', models.URLField(max_length=500)),
                ('google_drive_id', models.CharField(blank=True, max_length=100, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('gym', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_image', to='library.gym')),
            ],
        ),
        migrations.CreateModel(
            name='GymSubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the subscription plan', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the plan', null=True)),
                ('duration_in_months', models.PositiveIntegerField(help_text='Duration of the subscription in months')),
                ('duration_in_hours', models.PositiveIntegerField(default=0, help_text='Duration in hours (if applicable)')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price of the subscription plan', max_digits=10)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, help_text='Discounted price (if any)', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_plans', to='library.gym')),
            ],
        ),
        migrations.CreateModel(
            name='GymSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('valid', 'Valid'), ('expired', 'Expired')], default='valid', max_length=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(blank=True, max_length=20, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('valid', 'Valid'), ('invalid', 'Invalid')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coupon_applied', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applied_subscriptions', to='library.gymcoupon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gym_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('subscription_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='library.gymsubscriptionplan')),
            ],
        ),
        migrations.AddField(
            model_name='gymcoupon',
            name='applicable_plans',
            field=models.ManyToManyField(blank=True, help_text='Plans this coupon can be applied to', to='library.gymsubscriptionplan'),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', shortuuid.django_fields.ShortUUIDField(alphabet='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghjklmnpqrstuvwxyz', length=20, max_length=20, prefix='', unique=True)),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('pincode', models.CharField(help_text='6-digit postal code', max_length=6)),
                ('state', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('website_url', models.URLField(blank=True, null=True)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=15)),
                ('business_type', models.CharField(max_length=50)),
                ('classrooms', models.JSONField(default=dict, help_text='JSON containing classroom information with capacities')),
                ('facilities_available', models.TextField(blank=True, help_text='List of available facilities', null=True)),
                ('additional_services', models.TextField(blank=True, help_text='Any additional services offered', null=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Approval status of the application')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('upi_id', models.CharField(blank=True, help_text='UPI ID for receiving payments', max_length=255, null=True)),
                ('recipient_name', models.CharField(blank=True, help_text='Name of the UPI payment recipient', max_length=255, null=True)),
                ('thank_you_message', models.TextField(blank=True, help_text='Message to show after successful payment', null=True)),
                ('max_banners', models.PositiveIntegerField(default=2, help_text='Maximum number of banners allowed')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_institutions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InstitutionBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_drive_link', models.CharField(max_length=1000)),
                ('google_drive_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banners', to='library.institution')),
            ],
        ),
        migrations.CreateModel(
            name='InstitutionCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('discount_type', models.CharField(choices=[('PERCENTAGE', 'Percentage'), ('FIXED', 'Fixed Amount')], max_length=10)),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('max_usage', models.PositiveIntegerField(default=1)),
                ('current_usage', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('EXPIRED', 'Expired')], default='ACTIVE', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='library.institution')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense_type', models.CharField(choices=[('water', 'Water Bill'), ('wifi', 'WiFi Bill'), ('rent', 'Rent'), ('electricity', 'Electricity Bill'), ('maintenance', 'Maintenance'), ('other', 'Other')], max_length=20)),
                ('description', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateField()),
                ('payment_mode', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('upi', 'UPI')], max_length=10)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='library.institution')),
            ],
            options={
                'verbose_name': 'Institution Expense',
                'verbose_name_plural': 'Institution Expenses',
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_drive_link', models.URLField(max_length=500)),
                ('google_drive_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='library.institution')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('status', models.CharField(choices=[('valid', 'Valid'), ('expired', 'Expired')], default='valid', max_length=10)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('valid', 'Valid'), ('invalid', 'Invalid')], default='pending', max_length=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('upi', 'UPI')], default='cash', max_length=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coupon_applied', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applied_subscriptions', to='library.institutioncoupon')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='institution_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Institution Subscription',
                'verbose_name_plural': 'Institution Subscriptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InstallmentPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField(auto_now_add=True)),
                ('remaining_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('pending', 'Pending'), ('overdue', 'Overdue')], default='pending', max_length=10)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installments', to='library.institutionsubscription')),
            ],
            options={
                'verbose_name': 'Installment Payment',
                'verbose_name_plural': 'Installment Payments',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionSubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the subscription plan', max_length=255)),
                ('course_description', models.TextField(blank=True, help_text='Description of the course', null=True)),
                ('faculty_description', models.TextField(blank=True, help_text='Description of the faculty members', null=True)),
                ('subject_cover', models.TextField(blank=True, help_text='List of subjects covered in this course', null=True)),
                ('exam_cover', models.TextField(blank=True, help_text='List of exams covered in this course', null=True)),
                ('start_time', models.TimeField(help_text='Start time of the course')),
                ('end_time', models.TimeField(help_text='End time of the course')),
                ('start_date', models.DateField(help_text='Start date of the subscription')),
                ('course_duration', models.PositiveIntegerField(help_text='Duration of the course in months')),
                ('old_price', models.DecimalField(decimal_places=2, help_text='Original price of the subscription', max_digits=10)),
                ('new_price', models.DecimalField(decimal_places=2, help_text='Discounted price of the subscription', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_plans', to='library.institution')),
            ],
            options={
                'verbose_name': 'Institution Subscription Plan',
                'verbose_name_plural': 'Institution Subscription Plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='institutionsubscription',
            name='subscription_plan',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='library.institutionsubscriptionplan'),
        ),
        migrations.AddField(
            model_name='institutioncoupon',
            name='applicable_plans',
            field=models.ManyToManyField(blank=True, help_text='Subscription plans this coupon can be applied to', to='library.institutionsubscriptionplan'),
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('description', models.TextField()),
                ('venue_location', models.TextField(help_text='Detailed location of the venue')),
                ('venue_name', models.CharField(help_text='Name of the venue', max_length=200)),
                ('business_type', models.CharField(max_length=50)),
                ('max_banners', models.PositiveIntegerField(default=2, help_text='Maximum number of banners allowed')),
                ('social_media_links', models.TextField(blank=True, help_text='Comma separated list of social media links', null=True)),
                ('capacity', models.PositiveIntegerField(help_text='Maximum capacity of the venue')),
                ('equipment_available', models.TextField(blank=True, help_text='List of available equipment', null=True)),
                ('additional_services', models.TextField(blank=True, help_text='Any additional services offered', null=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Approval status of the application')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=15, null=True)),
                ('pincode', models.CharField(help_text='Pincode of the venue location', max_length=10)),
                ('district', models.CharField(help_text='District of the venue location', max_length=100)),
                ('city', models.CharField(help_text='City of the venue location', max_length=100)),
                ('state', models.CharField(help_text='State of the venue location', max_length=100)),
                ('upi_id', models.CharField(max_length=50)),
                ('recipient_name', models.CharField(max_length=100)),
                ('thank_you_message', models.CharField(max_length=200)),
                ('available_seats', models.PositiveIntegerField(default=0)),
                ('opening_time', models.TimeField()),
                ('closing_time', models.TimeField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_libraries', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ManyToManyField(blank=True, related_name='libraries_staffed', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='libraries', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(blank=True, related_name='joined_libraries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expense_name', models.CharField(max_length=255)),
                ('expense_description', models.TextField(blank=True, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateField()),
                ('payment_mode', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Card'), ('UPI', 'UPI')], default='CASH', max_length=10)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='library.library')),
            ],
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_drive_link', models.CharField(max_length=1000)),
                ('google_drive_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banners', to='library.library')),
            ],
        ),
        migrations.CreateModel(
            name='AdminCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_id', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('gym', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_cards', to='library.gym')),
                ('institution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_cards', to='library.institution')),
                ('library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_cards', to='library.library')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='library',
            field=models.ManyToManyField(blank=True, related_name='library_users', to='library.library'),
        ),
        migrations.CreateModel(
            name='LibraryImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_drive_link', models.URLField(max_length=500)),
                ('google_drive_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('library', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='image', to='library.library')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('verification_notes', models.TextField(blank=True, null=True)),
                ('screenshot_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to='library.institutionsubscription')),
                ('verified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Payment Verification',
                'verbose_name_plural': 'Payment Verifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='library.library')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the subscription plan', max_length=255)),
                ('start_date', models.DateField(help_text='The date when the subscription plan was created')),
                ('duration_in_months', models.IntegerField(help_text='Duration of the subscription plan in months')),
                ('duration_in_hours', models.IntegerField(default=0, help_text='Duration of the subscription plan in hours (if applicable)')),
                ('normal_price', models.DecimalField(decimal_places=2, help_text='The normal price of the subscription plan', max_digits=10)),
                ('discount_price', models.DecimalField(blank=True, decimal_places=2, help_text='The discounted price of the subscription plan (if any)', max_digits=10, null=True)),
                ('library', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscription_plans', to='library.library')),
                ('user', models.ForeignKey(help_text='The vendor who created this subscription plan', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription Plan',
                'verbose_name_plural': 'Subscription Plans',
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20, unique=True)),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount')], max_length=10)),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('valid_from', models.DateTimeField()),
                ('valid_to', models.DateTimeField()),
                ('max_usage', models.PositiveIntegerField(default=1)),
                ('times_used', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_coupons', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='library.library')),
                ('applicable_plans', models.ManyToManyField(blank=True, to='library.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='TimetableEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('subject', models.CharField(max_length=100)),
                ('faculty_ssid', models.CharField(max_length=20)),
                ('faculty_name', models.CharField(blank=True, max_length=100, null=True)),
                ('classroom', models.CharField(blank=True, max_length=100, null=True)),
                ('cell_row', models.IntegerField(default=0)),
                ('cell_col', models.IntegerField(default=0)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.institution')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('valid', 'Valid'), ('invalid', 'Invalid')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='library.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('valid', 'Valid'), ('expired', 'Expired')], default='valid', max_length=10)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.subscriptionplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Subscription',
                'verbose_name_plural': 'User Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='VendorSSID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissions', models.CharField(blank=True, choices=[('manage_users', 'Manage Users'), ('nfc_add_user', 'Add User via NFC'), ('attendance', 'Attendance'), ('view_vendor_details', 'View Vendor Details'), ('view_expenses', 'View Expense Page'), ('view_all_attendance', 'View All Attendance'), ('verify_payments', 'Verify Payments')], max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.library')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='vendor_ssids',
            field=models.ManyToManyField(blank=True, to='library.vendorssid'),
        ),
        migrations.CreateModel(
            name='GymCardLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_id', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('allocated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gym_allocations_logged', to=settings.AUTH_USER_MODEL)),
                ('gym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_allocation_logs', to='library.gym')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gym_card_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'unique_together': {('gym', 'user', 'card_id')},
            },
        ),
        migrations.CreateModel(
            name='CoachingAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('check_in_color', models.IntegerField(default=0)),
                ('check_out_color', models.IntegerField(default=0)),
                ('duration_color', models.IntegerField(default=0)),
                ('nfc_id', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coaching_attendances', to=settings.AUTH_USER_MODEL)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='library.institution')),
            ],
            options={
                'unique_together': {('user', 'institution', 'check_in_time')},
            },
        ),
        migrations.CreateModel(
            name='InstitutionCardLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_id', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('allocated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='institution_allocations_logged', to=settings.AUTH_USER_MODEL)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_allocation_logs', to='library.institution')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='institution_card_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'unique_together': {('institution', 'user', 'card_id')},
            },
        ),
        migrations.CreateModel(
            name='InstitutionReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('comment', models.TextField(blank=True, null=True)),
                ('reply', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='library.institution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('institution', 'user')},
            },
        ),
        migrations.CreateModel(
            name='InstitutionStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissions', models.CharField(blank=True, help_text='Comma-separated list of permission keys.', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='library.institution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_in_institutions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('institution', 'user')},
            },
        ),
        migrations.CreateModel(
            name='LibraryAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('check_in_color', models.IntegerField(default=0)),
                ('check_out_color', models.IntegerField(default=0)),
                ('duration_color', models.IntegerField(default=0)),
                ('nfc_id', models.CharField(blank=True, max_length=100, null=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='library.library')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_attendances', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'library', 'check_in_time')},
            },
        ),
        migrations.CreateModel(
            name='LibraryCardLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_id', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('allocated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='library_allocations_logged', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_allocation_logs', to='library.library')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='library_card_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'unique_together': {('library', 'user', 'card_id')},
            },
        ),
        migrations.CreateModel(
            name='SubjectFacultyMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=100)),
                ('faculty_ssid', models.CharField(max_length=10)),
                ('faculty_name', models.CharField(blank=True, max_length=100, null=True)),
                ('institution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_faculty_maps', to='library.institution')),
            ],
            options={
                'unique_together': {('institution', 'subject')},
            },
        ),
    ]
